package com.dawii.GimnasioDAWII.Controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.dawii.GimnasioDAWII.Model.Membresia;
import com.dawii.GimnasioDAWII.Model.Pago;
import com.dawii.GimnasioDAWII.Service.MembresiaService;
import com.dawii.GimnasioDAWII.Service.PagoService;


@RestController
@RequestMapping("/venta_menbresia")
public class VentaMembresiaController {
	
	@Autowired
	MembresiaService membresiaService;
	@Autowired
	PagoService pagoService;
	
	//Codigo para la transacción
	@PostMapping
    public ResponseEntity<String> crearMembresiaYPago(@RequestBody Membresia membresia) {
        try {
            // Guardar la membresía y obtener el ID generado
            Membresia nuevaMembresia = membresiaService.crearMembresia(membresia);
            int membresiaId = nuevaMembresia.getMembresiaId();

            // Asignar la membresía al pago
            Pago pago = membresia.getPagos().iterator().next();
            pago.setMembresia(nuevaMembresia);

            // Guardar el pago
            pagoService.crearPago(pago);

            return new ResponseEntity<>("Membresía y pago creados exitosamente con ID de membresía: " + membresiaId, HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>("Error al crear membresía y pago: " + e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
	
		
	
	
	/*
	 * @Autowired private VentaMembresiaService ventaMembresiaService;
	 * 
	 * @Autowired private MiembroService miembroservice;
	 * 
	 * @Autowired private PlanesService planService;
	 * 
	 * @Autowired private UsuarioService userService;
	 * 
	 * 
	 * @GetMapping("/obtenerMiembro/{nrodoc}")
	 * 
	 * @ResponseBody public ResponseEntity<Miembro> obtenerMiembro(@PathVariable
	 * String nrodoc) { Miembro miembro =
	 * miembroservice.buscarPorNumeroDocumento(nrodoc); return
	 * ResponseEntity.ok(miembro); }
	 * 
	 * @GetMapping("/obtenerMiembro/{miembroId}")
	 * 
	 * @ResponseBody public ResponseEntity<Miembro> obtenerMiembroId(@PathVariable
	 * Integer miembroId) { Miembro miembro =
	 * miembroservice.obtenerMiembro(miembroId); return ResponseEntity.ok(miembro);
	 * }
	 * 
	 * @GetMapping("/obtenerPlan/{planesId}")
	 * 
	 * @ResponseBody public ResponseEntity<Planes> obtenerPlan(@PathVariable Integer
	 * planesId) { Planes plan = planService.planGet(planesId); return
	 * ResponseEntity.ok(plan); }
	 * 
	 * @GetMapping("/obtenerUsuario/{usuarioId}")
	 * 
	 * @ResponseBody public ResponseEntity<Usuario> obtenerUsuario(@PathVariable
	 * Integer usuarioId) { Usuario user = userService.usuarioGet(usuarioId); return
	 * ResponseEntity.ok(user); }
	 * 
	 * 
	 * @GetMapping("/irTransaccion") public String mostrarPagina(Model model) {
	 * VentaMembresia ventaRequest = new VentaMembresia();
	 * 
	 * ventaRequest.getMembresia().setFechaInicio(Date.valueOf(LocalDate.now()));
	 * ventaRequest.getMembresia().setFechaVencimiento(Date.valueOf(LocalDate.now())
	 * );
	 * 
	 * model.addAttribute("ventaRequest", ventaRequest);
	 * model.addAttribute("planes", planService.list());
	 * 
	 * return "ventaMembresiaRegistrar"; }
	 * 
	 * //aqui inicia la Transsacion
	 * 
	 * @PostMapping public ResponseEntity<String> realizarVenta(@RequestBody
	 * VentaMembresia ventaRequest) {
	 * 
	 * Membresia membresia = ventaRequest.getMembresia(); Pago pago =
	 * ventaRequest.getPago();
	 * 
	 * /// Miembro miembro =
	 * obtenerMiembroAjax(ventaRequest.getMembresia().getMiembros().getMiembroId());
	 * ventaRequest.getMembresia().setMiembros(miembro);
	 * 
	 * Planes plan =
	 * obtenerPlanAjax(ventaRequest.getMembresia().getPlanes().getPlanesId());
	 * ventaRequest.getMembresia().setPlanes(plan);
	 * 
	 * Usuario usuario =
	 * obtenerUsuarioAjax(ventaRequest.getMembresia().getUsuarios().getUsuarioId());
	 * ventaRequest.getMembresia().setUsuarios(usuario); ///
	 * 
	 * pago.setMembresia(membresia); membresia.setPagos(null);
	 * 
	 * ventaMembresiaService.realizarVentaMembresia(membresia, pago);
	 * 
	 * return ResponseEntity.ok("Venta de membresía realizada exitosamente."); }
	 * 
	 * 
	 * 
	 * private Miembro obtenerMiembroAjax(String nrodoc) { Miembro miembro =
	 * miembroservice.buscarPorNumeroDocumento(nrodoc); return miembro; }
	 * 
	 * 
	 * private Miembro obtenerMiembroAjax(Integer miembroId) { Miembro miembro =
	 * miembroservice.obtenerMiembro(miembroId); return miembro; }
	 * 
	 * 
	 * private Planes obtenerPlanAjax(Integer planesId) { Planes plan =
	 * planService.planGet(planesId); return plan; }
	 * 
	 * 
	 * 
	 * private Usuario obtenerUsuarioAjax(Integer usuarioId) { Usuario user =
	 * userService.usuarioGet(usuarioId); return user; }
	 */

}
